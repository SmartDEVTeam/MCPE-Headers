#pragma once

#include "Entity.h"

class Item;
class MobEffectInstance;
class PathNavigation;
class LookControl;
class MoveControl;
class JumpControl;
class BodyControl;
class Sensing;
class MobEffect;
class EntityUniqueID;
class Attribute;
class ItemEntity;
class TextureUVCoordinateSet;
#include "../item/ItemInstance.h"

class Mob : public Entity
{
public:
	Mob(Level&);
	Mob(EntityDefinitionGroup&, const EntityDefinitionIdentifier&);
	
	/* vtable */
	virtual void reloadHardcodedClient(Entity::InitializationMethod, const VariantParameterList&);
	virtual void initializeComponents(Entity::InitializationMethod, const VariantParameterList&);
	virtual bool hasComponent(const std::string&) const;
	virtual ~Mob();
	virtual void teleportTo(const Vec3&, int, int);
	virtual void lerpTo(const Vec3&, const Vec2&, int);
	virtual void normalTick();
	virtual void baseTick();
	virtual void rideTick();
	virtual float getHeadHeight() const;
	virtual void playerTouch(Player&);
	virtual bool isImmobile() const;
	virtual bool isPickable();
	virtual bool isPushable() const;
	virtual bool isShootable();
	virtual bool isSneaking() const;
	virtual bool isAlive() const;
	virtual void animateHurt();
	virtual void doFireHurt(int);
	virtual void handleEntityEvent(EntityEvent, int);
	//virtual void __cxa_pure_virtual;
	virtual void setOnFire(int);
	virtual void causeFallDamage(float);
	virtual bool canAddRider(Entity&) const;
	virtual bool canBePulledIntoVehicle() const;
	virtual void stopRiding(bool, bool);
	virtual void buildDebugInfo(std::string&) const;
	virtual float getYHeadRot() const;
	virtual bool outOfWorld();
	virtual void _hurt(const EntityDamageSource&, int, bool, bool);
	virtual void readAdditionalSaveData(const CompoundTag&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void _playStepSound(const BlockPos&, int);
	virtual void knockback(Entity*, int, float, float, float);
	virtual void die(const EntityDamageSource&);
	virtual void resolveDeathLoot(bool, int, const EntityDamageSource&);
	virtual bool canSee(const Entity&) const;
	virtual void spawnAnim();
	virtual bool isSleeping() const;
	virtual void setSneaking(bool);
	virtual bool isSprinting() const;
	virtual void setSprinting(bool);
	virtual void getVoicePitch();
	virtual void playAmbientSound();
	virtual void getAmbientSoundPostponeTicks();
	virtual TextureUVCoordinateSet& getItemInHandIcon(const ItemInstance*, int);
	virtual float getSpeed() const;
	virtual void setSpeed(float);
	virtual float getJumpPower() const;
	virtual void heal(int);
	virtual void hurtEffects(const EntityDamageSource&, int, bool, bool);
	virtual int getMeleeWeaponDamageBonus(Mob*);
	virtual int getMeleeKnockbackBonus();
	virtual bool actuallyHurt(int, const EntityDamageSource*, bool);
	virtual bool isInvertedHealAndHarm() const;
	virtual void travel(float, float);
	virtual void applyFinalFriction(float);
	virtual void updateWalkAnim();
	virtual void aiStep();
	virtual void pushEntities();
	virtual void lookAt(Entity*, float, float);
	virtual bool isLookingAtAnEntity();
	virtual void checkSpawnRules(bool);
	virtual bool shouldDespawn() const;
	virtual void getAttackAnim(float);
	virtual void performRangedAttack(Entity&, float);
	virtual ItemInstance& getCarriedItem();
	virtual ItemInstance& getCarriedItem() const;
	virtual void setCarriedItem(const ItemInstance&);
	virtual int getItemUseDuration();
	virtual void swing();
	virtual bool ate();
	virtual float getMaxHeadXRot();
	virtual Mob* getLastHurtByMob();
	virtual void setLastHurtByMob(Mob*);
	virtual Player* getLastHurtByPlayer();
	virtual void setLastHurtByPlayer(Player*);
	virtual Entity* getLastHurtMob();
	virtual void setLastHurtMob(Entity*);
	virtual bool canAttack(Entity*, bool);
	virtual bool isAlliedTo(Mob*);
	virtual void doHurtTarget(Entity*);
	virtual bool canBeControlledByRider();
	virtual void getMutableAttribute(const Attribute&);
	virtual void getAttribute(const Attribute&) const;
	virtual int getEquipmentCount() const;
	virtual void getArmorValue();
	virtual float getArmorCoverPercentage() const;
	virtual void hurtArmor(int);
	virtual void setArmor(ArmorSlot, const ItemInstance*);
	virtual void getArmor(ArmorSlot) const;
	virtual void getAllArmor() const;
	virtual void getAllArmor();
	virtual void getAllHand() const;
	virtual void getAllHand();
	virtual void getAllEquipment() const;
	virtual void getAllEquipment();
	virtual void getArmorTypeHash();
	virtual void sendInventory() const;
	virtual bool canBeAffected(const MobEffectInstance&);
	virtual void getDamageAfterMagicAbsorb(const EntityDamageSource&, int);
	virtual void onBorn(Mob&, Mob&);
	virtual void onLove();
	virtual float getWaterSlowDown() const;
	virtual void _removeWhenFarAway();
	virtual void jumpFromGround();
	virtual void _pickUpItem(ItemEntity&);
	virtual void updateAi();
	virtual void newServerAiStep();
	virtual void _serverAiMobStep();
	virtual void getDamageAfterArmorAbsorb(const EntityDamageSource&, int);
	virtual void getExperienceReward() const;
	virtual void dropEquipment(const EntityDamageSource&, int);
	virtual bool useNewAi() const;
	virtual void tickDeath();
	virtual void onEffectAdded(MobEffectInstance&);
	virtual void onEffectUpdated(const MobEffectInstance&);
	virtual void onEffectRemoved(MobEffectInstance&);
};

