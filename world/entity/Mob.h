#pragma once

#include "Entity.h"

class Attribute;
class AttributeInstance;
class MobEffect;
class MobEffectInstance;
enum class EquipmentSlot;
enum class AttributeBuffType;
namespace mce { class UUID; }

class Mob : public Entity
{
public:

	enum class TravelType;

	Mob(EntityDefinitionGroup&, EntityDefinitionIdentifier const&);
	Mob(Level&);

	// virtual
	virtual void reloadHardcodedClient(Entity::InitializationMethod, const VariantParameterList&);
	virtual void initializeComponents(Entity::InitializationMethod, const VariantParameterList&);
	virtual bool hasComponent(const std::string&) const;
	virtual ~Mob();
	virtual void* getInterpolatedBodyRot(float) const;
	virtual void teleportTo(const Vec3&, int, int);
	virtual void lerpTo(const Vec3&, const Vec2&, int);
	virtual void normalTick();
	virtual void baseTick();
	virtual void rideTick();
	virtual float getHeadHeight() const;
	virtual void playerTouch(Player&);
	virtual bool isImmobile() const;
	virtual bool isPickable();
	virtual bool isPushable() const;
	virtual bool isShootable();
	virtual bool isSneaking() const;
	virtual bool isAlive() const;
	virtual bool canPowerJump() const;
	virtual void animateHurt();
	virtual void doFireHurt(int);
	virtual void handleEntityEvent(EntityEvent, int);
	virtual EntityType getEntityTypeId() const = 0;
	virtual void setOnFire(int);
	virtual void causeFallDamage(float);
	virtual bool canAddRider(Entity&) const;
	virtual bool canBePulledIntoVehicle() const;
	virtual void inCaravan() const;
	virtual void stopRiding(bool, bool);
	virtual void buildDebugInfo(std::string&) const;
	virtual float getYHeadRot() const;
	virtual bool outOfWorld();
	virtual void _hurt(const EntityDamageSource&, int, bool, bool);
	virtual void readAdditionalSaveData(const CompoundTag&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void _playStepSound(const BlockPos&, int);
	virtual void _removeRider(Entity&, bool);
	virtual void knockback(Entity*, int, float, float, float);
	virtual void die(const EntityDamageSource&);
	virtual void resolveDeathLoot(bool, int, const EntityDamageSource&);
	virtual bool canSee(const Entity&) const;
	virtual void spawnAnim();
	virtual bool isSleeping() const;
	virtual void setSneaking(bool);
	virtual bool isSprinting() const;
	virtual void setSprinting(bool);
	virtual float getVoicePitch();
	virtual void playAmbientSound();
	virtual int getAmbientSoundPostponeTicks();
	virtual const TextureUVCoordinateSet& getItemInHandIcon(const ItemInstance*, int);
	virtual float getSpeed() const;
	virtual void setSpeed(float);
	virtual float getJumpPower() const;
	virtual void heal(int);
	virtual void actuallyHeal(int);
	virtual void hurtEffects(const EntityDamageSource&, int, bool, bool);
	virtual int getMeleeWeaponDamageBonus(Mob*);
	virtual bool getMeleeKnockbackBonus();
	virtual void actuallyHurt(int, const EntityDamageSource*, bool);
	virtual bool isInvertedHealAndHarm() const;
	virtual void travel(float, float);
	virtual void applyFinalFriction(float);
	virtual void updateWalkAnim();
	virtual void aiStep();
	virtual bool pushEntities();
	virtual void lookAt(Entity*, float, float);
	virtual bool isLookingAtAnEntity();
	virtual void checkSpawnRules(bool);
	virtual void checkSpawnObstruction() const;
	virtual bool shouldDespawn() const;
	virtual void* getAttackAnim(float);
	virtual void performRangedAttack(Entity&, float);
	virtual ItemInstance& getCarriedItem() const;
	virtual void setCarriedItem(const ItemInstance&);
	virtual int getItemUseDuration();
	virtual int getItemUseStartupProgress();
	virtual int getItemUseIntervalProgress();
	virtual void swing();
	virtual float getTimeAlongSwing();
	virtual bool ate();
	virtual float getMaxHeadXRot();
	virtual Mob* getLastHurtByMob();
	virtual void setLastHurtByMob(Mob*);
	virtual Player* getLastHurtByPlayer();
	virtual void setLastHurtByPlayer(Player*);
	virtual Entity* getLastHurtMob();
	virtual void setLastHurtMob(Entity*);
	virtual bool canAttack(Entity*, bool);
	virtual bool isAlliedTo(Mob*);
	virtual bool doHurtTarget(Entity*);
	virtual bool canBeControlledByRider();
	virtual void leaveCaravan();
	virtual void joinCaravan(Mob*);
	virtual bool hasCaravanTail() const;
	virtual void* getCaravanHead() const;
	virtual AttributeInstance* getMutableAttribute(const Attribute&);
	virtual AttributeInstance* getAttribute(const Attribute&) const;
	virtual int getEquipmentCount() const;
	virtual int getArmorValue();
	virtual float getArmorCoverPercentage() const;
	virtual void hurtArmor(int);
	virtual void setArmor(ArmorSlot, const ItemInstance&);
	virtual ItemInstance* getArmor(ArmorSlot) const;
	virtual bool containerChanged(int);
	virtual void updateEquipment();
	virtual void clearEquipment();
	virtual std::vector<const ItemInstance*> getAllArmor() const;
	virtual std::vector<const ItemInstance*> getAllHand() const;
	virtual std::vector<const ItemInstance*> getAllEquipment() const;
	virtual int getArmorTypeHash();
	virtual void sendInventory() const;
	virtual bool canBeAffected(const MobEffectInstance&);
	virtual bool canBeAffectedByArrow(const MobEffectInstance&);
	virtual int getDamageAfterMagicAbsorb(const EntityDamageSource&, int);
	virtual void onBorn(Mob&, Mob&);
	virtual void onLove();
	virtual void setItemSlot(EquipmentSlot, ItemInstance&);
	virtual float getWaterSlowDown() const;
	virtual void setOffhandSlot(const ItemInstance&);
	virtual ItemInstance* getEquippedTotem();
	virtual void consumeTotem();
	virtual void attackAnimation(Entity*, float);
	virtual float getAttackTime();
	virtual void _getWalkTargetValue(const BlockPos&);
	virtual bool canExistWhenDisallowMob() const;
	virtual void _removeWhenFarAway();
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void newServerAiStep();
	virtual void _serverAiMobStep();
	virtual int getDamageAfterArmorAbsorb(const EntityDamageSource&, int);
	virtual int getExperienceReward() const;
	virtual void dropEquipment(const EntityDamageSource&, int);
	virtual void dropBags();
	virtual void dropContainer();
	virtual bool useNewAi() const;
	virtual void tickDeath();
	virtual void onEffectAdded(MobEffectInstance&);
	virtual void onEffectUpdated(const MobEffectInstance&);
	virtual void onEffectRemoved(MobEffectInstance&);
	virtual void _endJump();

	// non virtual
	void registerAttributes();
	void resetAttributes();
	void createAIGoals();
	void* getAttributes();
	void removeEffect(int);
	void addEffect(MobEffectInstance const&);
	void removeAllEffects();
	void* getVillage() const;
	bool _isHeadInWater();
	void playSpawnSound();
	int getHealth() const;
	void tickAttributes();
	void* _sendDirtyMobData();
	void tickEffects();
	void _updateSprintingState();
	void setInvisible(bool);
	bool isGliding() const;
	void* healEffects(int);
	bool hasEffect(MobEffect const&) const;
	MobEffectInstance* getEffect(MobEffect const&) const;
	Mob::TravelType getTravelType();
	void* calcMoveRelativeSpeed(Mob::TravelType);
	void* saveArmor();
	bool hasAnyEffects();
	void serializationSetHealth(int);
	void* loadArmor(ListTag const*);
	void _verifyAttributes();
	void _applyRidingRotationLimits();
	void updateGliding();
	void checkDespawn(Mob*);
	void checkDespawn();
	bool _isPersistent() const;
	void setYya(float);
	void setYHeadRot(float);
	void setRiderLockedBodyRot(float);
	void setRiderRotLimit(float);
	int getGlidingTicks() const;
	void setWantsToBeJockey(bool);
	bool wantsToBeJockey() const;
	void setJumping(bool);
	void setJumpVelRedux(bool);
	void _doSprintParticleEffect();
	float getCurrentSwingDuration();
	void updateAttackAnim();
	ItemInstance& getItemSlot(EquipmentSlot);
	void* getNavigation();
	void* getLookControl();
	void* getMoveControl();
	void* getJumpControl();
	void* getSensing();
	void* updateMobId(EntityUniqueID&);
	int getLastHurtMobTimestamp();
	int getLastHurtByMobTimestamp();
	void removeEffectNoUpdate(int);
	int getActiveEffectCount() const;
	void removeEffectParticles();
	void updateInvisibilityStatus();
	void* getAllEffects();
	bool hasAttributeBuff(AttributeBuffType) const;
	int getMaxHealth() const;
	void setCanPickUpLoot(bool);
	bool canPickickUpLoot() const;
	float getXxa() const;
	float getYya() const;
	float getYRotA() const;
	void setYRotA(float);
	void incrementArrowCount(int);
	void setSurfaceMob(bool);
	void _addSpeedBonus(mce::UUID const&, std::string const&, float);
	void _removeSpeedBonus(mce::UUID const&);
	float getFlightSpeed();
	void setFlightSpeed(float);
	void onPlayerDimensionChanged(Player*, DimensionId);

	// static fields
	static void* PLAYER_HURT_EXPERIENCE_TIME;

};
