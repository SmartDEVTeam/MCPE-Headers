#pragma once

#include <string>
#include <vector>
#include <memory>
#include "EntityType.h"
#include "EntityUniqueID.h"
#include "../phys/Vec2.h"
#include "../phys/Vec3.h"
#include "../phys/AABB.h"
#include "../level/BlockPos.h"
#include "../level/FullBlock.h"

class Random;
class Level;
class Dimension;
class BlockSource;
class ItemInstance;
class Mob;
class Player;
class ItemEntity;
class EntityDefinitionGroup;
class EntityDefinitionIdentifier;
class VariantParameterList;
class EntityDamageSource;
class EntityInteraction;
class ContainerComponent;
class FillingContainer;
class CompoundTag;
class ListTag;
class SetEntityDataPacket;
class ChangeDimensionPacket;
class SeatDescription;
enum class EntityLocation;
enum class EntityFlags;
enum class EntityCategory;
enum class ArmorSlot;
enum class EntityEvent;
enum class DimensionId;
enum class LevelSoundEvent;
enum class MaterialType;
enum class PaletteColor;

struct EntityPos {
	Vec3 pos;

	EntityPos(Vec3 pos) : pos(pos) { }
	operator Vec3() { return pos; }
};

struct EntityLink {
	char type; // 1 or 2
	EntityUniqueID riderId;
	EntityUniqueID ridingId;
	char unknown = 0;
};

class Entity
{
public:

	enum class InitializationMethod;

	char filler[0xCA8];
	/* size = 0xCAC */

	// virtual
	virtual void reloadHardcoded(Entity::InitializationMethod, const VariantParameterList&);
	virtual void reloadHardcodedClient(Entity::InitializationMethod, const VariantParameterList&);
	virtual void initializeComponents(Entity::InitializationMethod, const VariantParameterList&);
	virtual void reloadComponents(Entity::InitializationMethod, const VariantParameterList&);
	virtual bool hasComponent(const std::string&) const;
	virtual bool hasInventory() const;
	virtual FillingContainer* getInventory();
	virtual ~Entity();
	virtual void reset();
	virtual EntityType getOwnerEntityType();
	virtual void remove();
	virtual void setPos(const Vec3&);
	virtual const EntityPos& getPos() const;
	virtual const EntityPos& getPosOld() const;
	virtual Vec3 getPosExtrapolated(float) const;
	virtual Vec3 getVelocity() const;
	virtual void setRot(const Vec2&);
	virtual void move(const Vec3&);
	virtual void* getInterpolatedBodyRot(float) const;
	virtual void checkBlockCollisions(const AABB&);
	virtual void checkBlockCollisions();
	virtual void breaksFallingBlocks() const;
	virtual void moveRelative(float, float, float);
	virtual void teleportTo(const Vec3&, int, int);
	virtual void tryTeleportTo(const Vec3&, bool, bool, int, int);
	virtual void lerpTo(const Vec3&, const Vec2&, int);
	virtual void lerpMotion(const Vec3&);
	virtual void turn(const Vec2&, bool);
	virtual void interpolateTurn(const Vec2&);
	virtual void* getAddPacket();
	virtual void normalTick();
	virtual void baseTick();
	virtual void rideTick();
	virtual void positionRider(Entity&, float) const;
	virtual float getRidingHeight();
	virtual void startRiding(Entity&);
	virtual void addRider(Entity&);
	virtual void flagRiderToRemove(Entity&);
	virtual void intersects(const Vec3&, const Vec3&);
	virtual bool isFree(const Vec3&, float);
	virtual bool isFree(const Vec3&);
	virtual bool isInWall() const;
	virtual bool isInvisible() const;
	virtual bool canShowNameTag();
	virtual bool canExistInPeaceful() const;
	virtual void setNameTagVisible(bool);
	virtual std::string getNameTag() const;
	virtual std::string getFormattedNameTag() const;
	virtual void setNameTag(const std::string&);
	virtual bool isInWater() const;
	virtual bool isInWaterOrRain();
	virtual bool isInLava();
	virtual bool isUnderLiquid(MaterialType) const;
	virtual void makeStuckInWeb();
	virtual float getHeadHeight() const;
	virtual float getCameraOffset() const;
	virtual float getShadowHeightOffs();
	virtual float getShadowRadius() const;
	virtual bool canSeeInvisible();
	virtual bool isSkyLit(float);
	virtual float getBrightness(float) const;
	virtual void interactPreventDefault();
	virtual void playerTouch(Player&);
	virtual void push(Entity&, bool);
	virtual void push(const Vec3&);
	virtual void partialPush(const Vec3&);
	virtual bool isImmobile() const;
	virtual bool isSilent();
	virtual bool isPickable();
	virtual bool isFishable() const;
	virtual bool isPushable() const;
	virtual bool isPushableByPiston() const;
	virtual bool isShootable();
	virtual bool isSneaking() const;
	virtual bool isAlive() const;
	virtual bool isOnFire() const;
	virtual bool isOnMagma() const;
	virtual bool isCreativeModeAllowed();
	virtual bool isSurfaceMob() const;
	virtual bool isTargetable() const;
	virtual void setTarget(Entity*);
	virtual void findAttackTarget();
	virtual void setOwner(EntityUniqueID);
	virtual void setSitting(bool);
	virtual void onTame();
	virtual void onFailedTame();
	virtual void onMate(Mob&);
	virtual int getInventorySize() const;
	virtual void* getEquipSlots() const;
	virtual void* getChestSlots() const;
	virtual void setStanding(bool);
	virtual bool canPowerJump() const;
	virtual void setCanPowerJump(bool);
	virtual bool shouldRender() const;
	virtual bool isInvulnerableTo(const EntityDamageSource&) const;
	virtual void animateHurt();
	virtual void doFireHurt(int);
	virtual void onLightningHit();
	virtual void onBounceStarted(const BlockPos&, const FullBlock&);
	virtual void feed(int);
	virtual void handleEntityEvent(EntityEvent, int);
	virtual float getPickRadius();
	virtual ItemEntity* spawnAtLocation(int, int);
	virtual ItemEntity* spawnAtLocation(int, int, float);
	virtual ItemEntity* spawnAtLocation(FullBlock, int);
	virtual ItemEntity* spawnAtLocation(FullBlock, int, float);
	virtual ItemEntity* spawnAtLocation(const ItemInstance&, float);
	virtual void killed(Entity*);
	virtual void awardKillScore(Entity&, int);
	virtual void setEquippedSlot(ArmorSlot, int, int);
	virtual void setEquippedSlot(ArmorSlot, const ItemInstance&);
	virtual void save(CompoundTag&);
	virtual void saveWithoutId(CompoundTag&);
	virtual void load(const CompoundTag&);
	virtual void loadLinks(const CompoundTag&, std::vector<EntityLink, std::allocator<EntityLink> >&);
	virtual EntityType getEntityTypeid() const = 0;
	virtual bool acceptClientsideEntityData(Player&, const SetEntityDataPacket&);
	virtual void queryEntityRenderer();
	virtual void* getSourceUniqueID() const;
	virtual void setOnFire(int);
	virtual void* getHandleWaterAABB() const;
	virtual void handleInsidePortal(const BlockPos&);
	virtual int getPortalCooldown() const;
	virtual int getPortalWaitTime() const;
	virtual DimensionId getDimensionId() const;
	virtual bool canChangeDimensions() const;
	virtual void changeDimension(DimensionId);
	virtual void changeDimension(const ChangeDimensionPacket&);
	virtual EntityUniqueID getControllingPlayer() const;
	virtual void checkFallDamage(float, bool);
	virtual void causeFallDamage(float);
	virtual void handleFallDistanceOnServer(float, bool);
	virtual void playSynchronizedSound(LevelSoundEvent, const Vec3&, int, bool);
	virtual void onSynchedDataUpdate(int);
	virtual bool canAddRider(Entity&) const;
	virtual bool canBePulledIntoVehicle() const;
	virtual void inCaravan() const;
	virtual bool canBeLeashed();
	virtual bool isLeashableType();
	virtual void tickLeash();
	virtual float getEyeHeight() const;
	virtual void sendMotionPacketIfNeeded();
	virtual bool canSynchronizeNewEntity() const;
	virtual void stopRiding(bool, bool);
	virtual void buildDebugInfo(std::string&) const;
	virtual void openContainerComponent(Player&);
	virtual bool useItem(ItemInstance&) const;
	virtual bool hasOutputSignal(signed char) const;
	virtual int getOutputSignal() const;
	virtual std::string getDebugText(std::vector<std::string, std::allocator<std::string> >&);
	virtual void startSeenByPlayer(Player&);
	virtual void stopSeenByPlayer(Player&);
	virtual float getMapDecorationRotation();
	virtual float getRiderDecorationRotation(Player&);
	virtual float getYHeadRot() const;
	virtual bool isWorldBuilder();
	virtual bool isCreative() const;
	virtual bool isAdventure() const;
	virtual void add(ItemInstance&);
	virtual void drop(const ItemInstance&, bool);
	virtual bool canDestroyBlock(const Block&) const;
	virtual void setAuxValue(int);
	virtual void setSize(float, float);
	virtual void setPos(const EntityPos&);
	virtual bool outOfWorld();
	virtual void _hurt(const EntityDamageSource&, int, bool, bool);
	virtual void markHurt();
	virtual void lavaHurt();
	virtual void readAdditionalSaveData(const CompoundTag&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void _playStepSound(const BlockPos&, int);
	virtual void checkInsideBlocks(float);
	virtual void pushOutOfBlocks(const Vec3&);
	virtual void updateWaterState();
	virtual void doWaterSplashEffect();
	virtual void spawnTrailBubbles();
	virtual bool updateInsideBlock();
	virtual void onBlockCollision(int);
	virtual void* getLootTable();
	virtual void* getDefaultLootTable();
	virtual void _removeRider(Entity&, bool);

	// non virtual
	Entity(EntityDefinitionGroup&, EntityDefinitionIdentifier const&);
	Entity(Level&);
	Entity(BlockSource&, std::string const&);
	void setBaseDefinition(std::string const&, bool, bool);
	void setRegion(BlockSource&);
	void reload();
	bool isRegionValid() const;
	void updateDescription();
	Level* getLevel();
	void setVariant(int);
	void setMarkVariant(int);
	void setColor(PaletteColor);
	void setStatusFlag(EntityFlags, bool);
	void addDefinitionGroup(std::string const&);
	void removeDefinitionGroup(std::string const&);
	bool hasDefinitionGroup(std::string const&) const;
	ContainerComponent* getContainerComponent() const;
	bool hasCategory(EntityCategory) const;
	bool hasType(EntityType) const;
	bool hasFamily(std::string const&) const;
	bool isSpawnableInCreative(EntityType);
	bool hasUniqueID() const;
	bool hasRuntimeID() const;
	EntityRuntimeID getRuntimeID() const;
	EntityUniqueID getUniqueID() const;
	void setRuntimeID(EntityRuntimeID);
	void setUniqueID(EntityUniqueID);
	bool isInClouds() const;
	int getVariant() const;
	int getMarkVariant() const;
	Entity* getTarget() const;
	Level* getLevel() const;
	EntityUniqueID getTargetId();
	void initParams(VariantParameterList&);
	bool isBaby() const;
	Vec3 getAttachPos(EntityLocation) const;
	void setBlockTarget(BlockPos const&);
	BlockPos getBlockTarget();
	bool getStatusFlag(EntityFlags) const;
	bool isStackable() const;
	int getAge() const;
	bool isTame() const;
	Player* getOwner() const;
	EntityUniqueID getOwnerId() const;
	bool isSitting() const;
	BlockSource& getRegion() const;
	void setPersistent();
	void moveBBs(Vec3 const&);
	void testForEntityStacking(BlockSource&, AABB const&, std::vector<AABB, std::allocator<AABB>>&);
	void testForCollidableMobs(BlockSource&, AABB const&, std::vector<AABB, std::allocator<AABB>>&);
	BlockPos _getBlockOnPos();
	void _playMovementSound(bool);
	void playSound(LevelSoundEvent, Vec3 const&, int);
	void onOnewayCollision(BlockPos);
	void onOnewayCollision(AABB const&);
	void _updateOnewayCollisions(BlockSource&);
	void* checkEntityOnewayCollision(BlockSource&, BlockPos const&);
	bool isRiding() const;
	void _updateOwnerChunk();
	bool isInWorld() const;
	void setPreviousPosRot(Vec3 const&, Vec2 const&);
	float getRadius() const;
	Vec3 getCenter(float) const;
	Vec3 getInterpolatedPosition(float) const;
	Vec3 getViewVector(float) const;
	Vec2 getInterpolatedRotation(float) const;
	Vec2 getViewVector2(float) const;
	void setEnforceRiderRotationLimit(bool);
	void setInheritRotationWhenRiding(bool);
	float getSpeedInMetersPerSecond() const;
	bool enforceRiderRotationLimit();
	void burn(int, bool);
	Vec3 getRandomPointInAABB(Random&);
	void tick(BlockSource&);
	bool isGlobal() const;
	bool isControlledByLocalInstance() const;
	void _manageRiders(BlockSource&);
	std::vector<EntityLink> getLinks() const;
	void _sendLinkPacket(EntityLink const&) const;
	void removeAllRiders(bool, bool);
	bool isRemoved() const;
	void* getRideableComponent() const;
	void* getEntityData();
	Entity* getRide() const;
	bool _tryPlaceAt(Vec3 const&);
	void _exitRide(Entity const&, float);
	Vec2 getRotation() const;
	void moveTo(Vec3 const&, Vec2 const&);
	void* _findRider(Entity&) const;
	void* _findRiderID(Entity&) const;
	void* getBoostableComponent() const;
	void setSeatDescription(Vec3 const&, SeatDescription const&);
	void buildDebugGroupInfo(std::string&) const;
	float distanceTo(Entity const&) const;
	float distanceTo(Vec3 const&) const;
	float distanceToSqr(Vec3 const&) const;
	float distanceToSqr(Entity const&) const;
	float distanceSqrToBlockPosCenter(BlockPos const&) const;
	bool hurt(EntityDamageSource const&, int, bool, bool);
	void* getProjectileComponent() const;
	void spawnTamingParticles(bool);
	void* _randomHeartPos();
	bool isInLove() const;
	bool canMate(Entity const&) const;
	bool isAngry() const;
	bool isSheared() const;
	bool isChested() const;
	bool isIgnited() const;
	bool hasSaddle() const;
	bool isCharged() const;
	void setCharged(bool);
	bool isPowered() const;
	void setPowered(bool);
	void setSaddle(bool);
	void spawnDeathParticles();
	void spawnEatParticles(ItemInstance const&, int);
	Dimension* getDimension() const;
	void resetRegion();
	std::unique_ptr<ListTag> saveLinks() const;
	bool isRide() const;
	void saveEntityFlags(CompoundTag&);
	void* getColor() const;
	void loadEntityFlags(CompoundTag const&);
	void* _convertOldSave(CompoundTag const&);
	void setChanged();
	void* getEntityData() const;
	bool isDebugging() const;
	bool isInsideBorderBlock(float) const;
	bool isRider(Entity&) const;
	bool isLeashed();
	EntityUniqueID getLeashHolder();
	void setLeashHolder(EntityUniqueID);
	void dropLeash(bool);
	short getAirSupply() const;
	short getTotalAirSupply() const;
	Vec3 getEyePos();
	bool isAutoSendEnabled() const;
	void sendMotionToServer(bool);
	void setGlobal(bool);
	bool isAutonomous() const;
	void setAutonomous(bool);
	void enableAutoSendPosRot(bool);
	void* getHurtColor() const;
	Vec3 getInterpolatedPosition2(float) const;
	Vec3 buildForward() const;
	void* getPortalEntranceAxis() const;
	void* getAgeableComponent() const;
	void* getAngryComponent() const;
	void* getBreathableComponent() const;
	void* getBreedableComponent() const;
	void* getExplodeComponent() const;
	void* getTameableComponent() const;
	void* getLookAtComponent() const;
	void* getTeleportComponent() const;
	void* getMountTamingComponent() const;
	void* getTimerComponent() const;
	void* getInteractComponent() const;
	void* getEquippableComponent() const;
	void* getHealableComponent() const;
	void* getScaleByAgeComponent() const;
	void* getRailMovementComponent() const;
	void* getDamageSensorComponent() const;
	void* getLeashableComponent() const;
	void* getTransformationComponent() const;
	void* getNameableComponent() const;
	void* getHopperComponent() const;
	void* getRailActivatorComponent() const;
	void* getNpcComponent() const;
	void* getTripodCameraComponent() const;
	void* getBossComponent() const;
	void* getAgentCommandComponent() const;
	void* getShooterComponent() const;
	void setLastHitBB(Vec3 const&, Vec3 const&);
	bool isWithinRestriction() const;
	bool isWithinRestriction(BlockPos const&) const;
	bool hasRestriction() const;
	void restrictTo(BlockPos const&, float);
	BlockPos getRestrictCenter() const;
	float getRestrictRadius() const;
	void clearRestriction();
	ItemEntity* dropTowards(ItemInstance const&, Vec3);
	EntityUniqueID lovePartnerId() const;
	void setInLove(Entity*);
	Vec3 calcCenterPos() const;
	bool hasEnoughFoodToBreed();
	bool _countFood(int);
	bool hasExcessFood();
	bool wantsMoreFood();
	void doEnchantDamageEffects(Mob&, Mob&);
	bool getInteraction(Player&, EntityInteraction&);
	void setChainedDamageEffects(bool);
	bool getChainedDamageEffects() const;
	void setCollidableMobNear(bool);
	bool getCollidableMobNear();
	void setCollidableMob(bool);
	bool getCollidableMob();

	// static fields
	static void* TOTAL_AIR_SUPPLY;
	static void* mEntityCounter;
	static std::string RIDING_TAG;

};
