#pragma once

#include "../Mob.h"

class ChunkSource;
class Tick;
class Item;
class MinecraftEventing;
class PacketSender;
class EventPacket;
class NetworkIdentifier;
class SkinInfoData;
class IContainerManager;
class BlockEntity;
class ChalkboardBlockEntity;
class Agent;
class PlayerInventoryProxy;
enum class GameType;
enum class CooldownType;
enum class CommandPermissionLevel;

class Player : public Mob {

public:

    enum class PositionMode;

    // virtual
    virtual void reloadHardcoded(Entity::InitializationMethod, VariantParameterList const&);
    virtual void initializeComponents(Entity::InitializationMethod, VariantParameterList const&);
    virtual ~Player();
    virtual void remove();
    virtual void teleportTo(Vec3 const&, int, int);
    virtual void* getAddPacket();
    virtual void normalTick();
    virtual void rideTick();
    virtual float getRidingHeight();
    virtual bool onLadder(bool);
    virtual float getHeadHeight() const;
    virtual float getCameraOffset() const;
    virtual bool isImmobile() const;
    virtual bool isPushable() const;
    virtual bool isPushableByPiston() const;
    virtual bool isShootable();
    virtual bool isCreativeModeAllowed();
    virtual void onBounceStarted(BlockPos const&, FullBlock const&);
    virtual void feed(int);
    virtual void handleEntityEvent(EntityEvent, int);
    virtual void awardKillScore(Entity&, int);
    virtual void setEquippedSlot(ArmorSlot, int, int);
    virtual void setEquippedSlot(ArmorSlot, ItemInstance const&);
    virtual EntityType getEntityTypeId() const;
    virtual int getPortalCooldown() const;
    virtual int getPortalWaitTime() const;
    virtual void onSynchedDataUpdate(int);
    virtual bool canBePulledIntoVehicle() const;
    virtual void sendMotionPacketIfNeeded();
    virtual void useItem(ItemInstance&) const;
    virtual float getMapDecorationRotation();
    virtual bool isWorldBuilder();
    virtual bool isCreative() const;
    virtual void add(ItemInstance&);
    virtual bool _hurt(EntityDamageSource const&, int, bool, bool);
    virtual void lavaHurt();
    virtual void readAdditionalSaveData(CompoundTag const&);
    virtual void addAdditionalSaveData(CompoundTag&);
    virtual void die(EntityDamageSource const&);
    virtual bool isSleeping() const;
    virtual float getSpeed() const;
    virtual void setSpeed(float);
    virtual void actuallyHurt(int, EntityDamageSource const*, bool);
    virtual void travel(float, float);
    virtual void aiStep();
    virtual ItemInstance* getCarriedItem();
    virtual ItemInstance const* getCarriedItem() const;
    virtual int getItemUseDuration();
    virtual std::vector<ItemInstance const*> getAllHand() const;
    virtual std::vector<ItemInstance*> getAllHand();
    virtual std::vector<ItemInstance const*> getAllEquipment() const;
    virtual std::vector<ItemInstance*> getAllEquipment();
    virtual void sendInventory() const;
    virtual void jumpFromGround();
    virtual void updateAi();
    virtual int getExperienceReward() const;
    virtual void dropEquipment(EntityDamageSource const&, int);
    virtual bool useNewAi() const;
    virtual void prepareRegion(ChunkSource&);
    virtual void destroyRegion();
    virtual void suspendRegion();
    virtual void onPrepChangeDimension();
    virtual void onDimensionChanged();
    virtual void changeDimensionWithCredits(DimensionId);
    virtual void tickWorld(Tick const&);
    virtual void moveView();
    virtual void setName(std::string const&);
    virtual void checkMovementStats(Vec3 const&);
    virtual void respawn();
    virtual void resetPos(bool);
    virtual bool isInTrialMode();
    virtual bool hasResource(int);
    virtual void completeUsingItem();
    virtual void setPermissions(CommandPermissionLevel);
    virtual void startCrafting(BlockPos const&, bool);
    virtual void startStonecutting(BlockPos const&);
    virtual void startDestroying();
    virtual void stopDestroying();
    virtual void openContainer(int, BlockPos const&);
    virtual void openContainer(int, EntityUniqueID const&);
    virtual void openFurnace(int, BlockPos const&);
    virtual void openEnchanter(int, BlockPos const&);
    virtual void openAnvil(int, BlockPos const&);
    virtual void openBrewingStand(int, BlockPos const&);
    virtual void openHopper(int, BlockPos const&);
    virtual void openHopper(int, EntityUniqueID const&);
    virtual void openDispenser(int, BlockPos const&, bool);
    virtual void openBeacon(int, BlockPos const&);
    virtual void openPortfolio();
    virtual void openHorseInventory(int, EntityUniqueID const&);
    virtual bool canOpenContainerScreen();
    virtual void openChalkboard(ChalkboardBlockEntity&);
    virtual void openNpcInteractScreen(Entity&);
    virtual void openInventory();
    virtual void openStructureEditor(BlockPos const&);
    virtual void displayChatMessage(std::string const&, std::string const&);
    virtual void displayClientMessage(std::string const&);
    virtual void displayLocalizableMessage(std::string const&, std::vector<std::string, std::allocator<std::string>> const&, bool);
    virtual void displayWhisperMessage(std::string const&, std::string const&);
    virtual void startSleepInBed(BlockPos const&);
    virtual void stopSleepInBed(bool, bool);
    virtual bool canStartSleepInBed();
    virtual short getSleepTimer() const;
    virtual void openTextEdit(BlockEntity*);
    virtual bool isLocalPlayer() const;
    virtual void stopLoading();
    virtual void registerTrackedBoss(EntityUniqueID);
    virtual void unRegisterTrackedBoss(EntityUniqueID);
    virtual void setPlayerGameType(GameType);
    virtual void _crit(Entity&);
    virtual MinecraftEventing* getEventing() const;
    virtual void sendEventPacket(EventPacket const&) const;
    virtual void addExperience(int);
    virtual void addLevels(int);
    virtual void setContainerData(IContainerManager&, int, int) = 0;
    virtual void slotChanged(IContainerManager&, int, ItemInstance const&, bool) = 0;
    virtual void refreshContainer(IContainerManager&, std::vector<ItemInstance, std::allocator<ItemInstance>> const&) = 0;
    virtual void deleteContainerManager();
    virtual void setFieldOfViewModifier(float);
    virtual bool isPositionRelevant(DimensionId, BlockPos const&);
    virtual bool isEntityRelevant(Entity const&);
    virtual void onSuspension();
    virtual void startCooldown(Item*);
    virtual int getItemCooldownLeft(CooldownType) const;
    virtual bool isItemInCooldown(CooldownType) const;
    virtual void onMovePlayerPacketNormal(Vec3 const&, Vec2 const&);

    // non virtual
    Player(Level&, PacketSender&, GameType, NetworkIdentifier const&, std::unique_ptr<SkinInfoData, std::default_delete<SkinInfoData>>, mce::UUID);
    void registerAttributes();
    void _registerElytraLoopSound();
    void resetPlayerLevel();
    int getNewEnchantmentSeed();
    NetworkIdentifier getClientId() const;
    void* getTrackedBosses();
    bool isSurvival() const;
    bool isViewer() const;
    Vec3 getCapePos(float);
    Dimension* getDimension() const;
    void setBedOffset(int);
    void setDefaultHeadHeight();
    void setRespawnPosition(BlockPos const&, bool);
    void setAllPlayersSleeping();
    bool isSleepingLongEnough() const;
    float getSleepRotation();
    bool checkBed(bool);
    void _tickCooldowns();
    void _applyExhaustion(Vec3 const&);
    void moveCape();
    bool isBouncing() const;
    int getPlayerIndex() const;
    void setPlayerIndex(int);
    bool isUsingItem() const;
    void* getItemInUse();
    void startUsingItem(ItemInstance, int);
    void stopUsingItem();
    void releaseUsingItem();
    ItemInstance* getSelectedItem() const;
    PlayerInventoryProxy* getSupplies() const;
    int getTicksUsingItem();
    void stopGliding();
    void causeFoodExhaustion(float);
    void handleJumpEffects();
    void setContainerManager(std::shared_ptr<IContainerManager>);
    void _touch(Entity&);
    void updateTrackedBosses();
    int getScore();
    bool isInCreativeMode();
    void* getDestroySpeed(Block const&) const;
    void* _getItemDestroySpeed(Block const&) const;
    void* getDestroyProgress(Block const&) const;
    bool canDestroy(Block const&) const;
    void* getPermissions();
    int getXpNeededForNextLevel() const;
    int getPlayerLevel() const;
    float getLevelProgress() const;
    void take(Entity&, int);
    bool isHurt();
    bool isHungry() const;
    void interact(Entity&);
    void attack(Entity&);
    int getAttackDamage();
    void recheckSpawnPosition();
    bool hasRespawnPosition() const;
    BlockPos getSpawnPosition();
    bool isForcedRespawn() const;
    void fixSpawnPosition(BlockPos&, std::vector<BlockSource*, std::allocator<BlockSource*>>) const;
    void fixStartSpawnPosition(BlockPos&, std::vector<BlockSource*, std::allocator<BlockSource*>>) const;
    void setTeleportDestination(Vec3 const&);
    void handleMovePlayerPacket(Player::PositionMode, Vec3 const&, Vec2 const&, float);
    bool isHiddenFrom(Mob&) const;
    void setRespawnDimensionId(DimensionId);
    bool canUseCarriedItemWhileMoving();
    void _addLevels(int);
    void sendInventorySlot(int) const;
    Vec3 getStandingPositionOnBlock(BlockPos const&);
    int getChunkRadius() const;
    void setChunkRadius(int);
    void updateTeleportDestPos();
    void setSkin(std::string const&, std::vector<unsigned char, std::allocator<unsigned char>> const&);
    SkinInfoData* getSkin() const;
    void eat(ItemInstance const&);
    void eat(int, float);
    int getEnchantmentSeed() const;
    void spawnExperienceOrb(Vec3 const&, int);
    bool hasOpenContainer() const;
    void* getContainerManager();
    void* getHudContainerManagerModel();
    float getLuck();
    bool shouldUpdateBossGUIBinds();
    bool shouldUpdateBosGUIControls();
    void startGliding();
    void setAgent(Agent*);
    Agent* getAgent() const;
    void fireDimensionChangedEvent(DimensionId);
    void* getDirection() const;

    static bool isValidUserName(std::string const&);
    static std::string filterValidUserName(std::string const&);

    // static fields
    static float DEFAULT_PLAYER_HEIGHT_OFFSET;
    static float PLAYER_GLIDING_CAMERA_OFFSET;
    static float DEFAULT_WALK_SPEED;
    static float DEFAULT_FLY_SPEED;
    static float DEFAULT_BB_WIDTH;
    static float DEFAULT_BB_HEIGHT;
    static void* DISTANCE_TO_TRAVELLED_EVENT;
    static void* DISTANCE_TO_TRANSFORM_EVENT;
    static Attribute HUNGER;
    static Attribute SATURATION;
    static Attribute EXHAUSTION;
    static Attribute LEVEL;
    static Attribute EXPERIENCE;

};
