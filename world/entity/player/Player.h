#pragma once

#include "../Mob.h"
#include "../../../gamemode/GameType.h"
class ChunkSource;
class GlobalPermissionsLevel;
class UserPermissionsLevel;
class BlockEntity;
class TelemetryEventPacket;
class CooldownType;
class EventPacket;
class ChalkboardBlockEntity;
class Tick;
class CommandPermissionLevel;

class Player : public Mob
{
public:
	virtual void reloadHardcoded(Entity::InitializationMethod, const VariantParameterList&);
	virtual void initializeComponents(Entity::InitializationMethod, const VariantParameterList&);
	virtual ~Player();
	virtual void remove();
	virtual void teleportTo(const Vec3&, int, int);
	virtual void getAddPacket();
	virtual void normalTick();
	virtual void rideTick();
	virtual float getRidingHeight();
	virtual bool onLadder(bool);
	virtual float getHeadHeight() const;
	virtual void getCameraOffset() const;
	virtual bool isImmobile() const;
	virtual bool isPushable() const;
	virtual bool isPushableByPiston() const;
	virtual bool isShootable();
	virtual bool isCreativeModeAllowed();
	virtual void onBounceStarted(const BlockPos&, const FullBlock&);
	virtual void feed(int);
	virtual void handleEntityEvent(EntityEvent, int);
	virtual void awardKillScore(Entity&, int);
	virtual void setEquippedSlot(ArmorSlot, int, int);
	virtual void setEquippedSlot(ArmorSlot, const ItemInstance&);
	virtual EntityType getEntityTypeId() const;
	virtual int getPortalCooldown() const;
	virtual int getPortalWaitTime() const;
	virtual void onSynchedDataUpdate(int);
	virtual bool canBePulledIntoVehicle() const;
	virtual void sendMotionPacketIfNeeded();
	virtual void useItem(ItemInstance&) const;
	virtual void getMapDecorationRotation();
	virtual bool isWorldBuilder();
	virtual bool isCreative() const;
	virtual void add(ItemInstance&);
	virtual void _hurt(const EntityDamageSource&, int, bool, bool);
	virtual void lavaHurt();
	virtual void readAdditionalSaveData(const CompoundTag&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void die(const EntityDamageSource&);
	virtual bool isSleeping() const;
	virtual float getSpeed() const;
	virtual void setSpeed(float);
	virtual bool actuallyHurt(int, const EntityDamageSource*, bool);
	virtual void travel(float, float);
	virtual void aiStep();
	virtual ItemInstance& getCarriedItem();
	virtual ItemInstance& getCarriedItem() const;
	virtual int getItemUseDuration();
	virtual void getAllHand() const;
	virtual void getAllHand();
	virtual void getAllEquipment() const;
	virtual void getAllEquipment();
	virtual void sendInventory() const;
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void getExperienceReward() const;
	virtual void dropEquipment(const EntityDamageSource&, int);
	virtual bool useNewAi() const;
	virtual void prepareRegion(ChunkSource&);
	virtual void destroyRegion();
	virtual void suspendRegion();
	virtual void onPrepChangeDimension();
	virtual void onDimensionChanged();
	virtual void changeDimensionWithCredits(DimensionId);
	virtual bool tickWorld(const Tick&);
	virtual void moveView();
	virtual void setName(const std::string&);
	virtual void checkMovementStats(const Vec3&);
	virtual void respawn();
	virtual void resetPos(bool);
	virtual bool isInTrialMode();
	virtual bool hasResource(int);
	virtual void completeUsingItem();
	virtual void setPermissions(CommandPermissionLevel);
	virtual void startCrafting(const BlockPos&, bool);
	virtual void startStonecutting(const BlockPos&);
	virtual void startDestroying();
	virtual void stopDestroying();
	virtual void openContainer(int, const BlockPos&);
	virtual void openContainer(int, const EntityUniqueID&);
	virtual void openFurnace(int, const BlockPos&);
	virtual void openEnchanter(int, const BlockPos&);
	virtual void openAnvil(int, const BlockPos&);
	virtual void openBrewingStand(int, const BlockPos&);
	virtual void openHopper(int, const BlockPos&);
	virtual void openHopper(int, const EntityUniqueID&);
	virtual void openDispenser(int, const BlockPos&, bool);
	virtual void openBeacon(int, const BlockPos&);
	virtual void openPortfolio();
	virtual void openHorseInventory(int, const EntityUniqueID&);
	virtual bool canOpenContainerScreen();
	virtual void openChalkboard(ChalkboardBlockEntity&);
	virtual void openNpcInteractScreen(Entity&);
	virtual void openInventory();
	virtual void openStructureEditor(const BlockPos&);
	virtual void displayChatMessage(const std::string&, const std::string&);
	virtual void displayClientMessage(const std::string&);
	virtual void displayLocalizableMessage(const std::string&, std::vector<std::string, const std::allocator<std::string>>&, bool);
	virtual void displayWhisperMessage(const std::string&, const std::string&);
	virtual void startSleepInBed(const BlockPos&);
	virtual void stopSleepInBed(bool, bool);
	virtual bool canStartSleepInBed();
	virtual void getSleepTimer() const;
	virtual void openTextEdit(BlockEntity*);
	virtual bool isLocalPlayer() const;
	virtual void stopLoading();
	virtual void registerTrackedBoss(EntityUniqueID);
	virtual void unRegisterTrackedBoss(EntityUniqueID);
	virtual void setPlayerGameType(GameType);
	virtual void _crit(Entity&);
	virtual void getEventing() const;
	virtual void sendEventPacket(const EventPacket&) const;
	virtual void addExperience(int);
	virtual void addLevels(int);
	//virtual void __cxa_pure_virtual;
	//virtual void __cxa_pure_virtual;
	//virtual void __cxa_pure_virtual;
	virtual void deleteContainerManager();
	virtual void setFieldOfViewModifier(float);
	virtual bool isPositionRelevant(DimensionId, const BlockPos&);
	virtual bool isEntityRelevant(const Entity&);
	virtual void onSuspension();
	virtual void startCooldown(Item*);
	virtual int getItemCooldownLeft(CooldownType) const;
	virtual bool isItemInCooldown(CooldownType) const;
	virtual void onMovePlayerPacketNormal(const Vec3&, const Vec2&);
	
	ItemInstance* getSelectedItem() const;
	bool IsCreative() const;
	bool IsSurvival() const;
	bool IsViewer() const;
	Dimension *getDimension() const;
	bool hasRespawnPosition() const;
	BlockPos getSpawnPosition();
	void setRespawnPosition(const BlockPos&);
	void setSkin(const std::string&, const std::string&);
	void take(Entity&, int);
};
